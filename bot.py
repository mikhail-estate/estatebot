import logging
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
NAME, AREA, GOAL, MORTGAGE, PHONE = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–∏—ë–º–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–¢–æ–ª—å–∫–æ –∏–º—è)"
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–π–æ–Ω–∞"""
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üèô –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ –ñ–ö –∫–≤–∞—Ä—Ç–∏—Ä–∞?")
    return AREA

async def get_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏"""
    context.user_data['area'] = update.message.text
    reply_keyboard = [["–î–ª—è —Å–µ–±—è", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"]]
    await update.message.reply_text(
        "üè† –ü–æ–∫—É–ø–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∏–ø–æ—Ç–µ–∫—É"""
    context.user_data['goal'] = update.message.text
    await update.message.reply_text("üíµ –ë—É–¥–µ—Ç–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∏–ø–æ—Ç–µ–∫—É? (–î–∞/–ù–µ—Ç)")
    return MORTGAGE

async def get_mortgage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    context.user_data['mortgage'] = update.message.text
    phone_btn = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup = ReplyKeyboardMarkup([[phone_btn]], resize_keyboard=True)
    await update.message.reply_text(
        "üì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è!",
        reply_markup=markup
    )
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.contact:
        context.user_data['phone'] = update.message.contact.phone_number
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
        try:
            with open("checklist.pdf", "rb") as file:
                await update.message.reply_document(
                    document=file,
                    caption="‚úÖ –í–æ—Ç –≤–∞—à —á–µ–∫-–ª–∏—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏—ë–º–∫–æ–π."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            "üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"üë§ –ò–º—è: {context.user_data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
            f"üìç –†–∞–π–æ–Ω: {context.user_data['area']}\n"
            f"üéØ –¶–µ–ª—å: {context.user_data['goal']}\n"
            f"üè¶ –ò–ø–æ—Ç–µ–∫–∞: {context.user_data['mortgage']}"
        )
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_msg
        )
        return ConversationHandler.END
    
    else:
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ
        await update.message.reply_text(
            "‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
                resize_keyboard=True
            )
        )
        return PHONE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("üö´ –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
    return ConversationHandler.END

async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_area)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            MORTGAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mortgage)],
            PHONE: [MessageHandler(filters.CONTACT | filters.TEXT, get_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    app.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.initialize()
    await app.start()
    await app.updater.start_polling(
        drop_pending_updates=True,
        timeout=30
    )
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Render
    while True:
        await asyncio.sleep(3600)

if __name__ == '__main__':
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")