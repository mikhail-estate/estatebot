import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
NAME, AREA, GOAL, MORTGAGE, PHONE = range(5)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –ø–æ –ø—Ä–∏—ë–º–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–¢–æ–ª—å–∫–æ –∏–º—è, –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)"
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–π–æ–Ω–∞."""
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üó∫Ô∏è –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ –ñ–ö —Ç—ã –ø–æ–∫—É–ø–∞–µ—à—å –∫–≤–∞—Ä—Ç–∏—Ä—É?")
    return AREA

async def get_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏."""
    context.user_data["area"] = update.message.text
    reply_keyboard = [["–î–ª—è —Å–µ–±—è", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"]]
    await update.message.reply_text(
        "üè† –ü–æ–∫—É–ø–∞–µ—à—å –¥–ª—è —Å–µ–±—è –∏–ª–∏ –ø–æ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∏–ø–æ—Ç–µ–∫—É."""
    context.user_data["goal"] = update.message.text
    await update.message.reply_text("üí∏ –ï—Å—Ç—å –ª–∏ –∏–ø–æ—Ç–µ–∫–∞? (–î–∞/–ù–µ—Ç)")
    return MORTGAGE

async def get_mortgage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–ø–æ—Ç–µ–∫–µ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."""
    context.user_data["mortgage"] = update.message.text
    
    # –ñ—ë—Å—Ç–∫–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
    phone_btn = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup = ReplyKeyboardMarkup([[phone_btn]], resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üì≤ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
        "‚ùó **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ** ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è!",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    if not update.message.contact:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        await update.message.reply_text(
            "‚ùå **–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª –Ω–∏–∂–µ:",
            parse_mode="Markdown"
        )
        return PHONE
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    context.user_data["phone"] = update.message.contact.phone_number
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
    try:
        with open("checklist.pdf", "rb") as file:
            await update.message.reply_document(
                document=file,
                caption="‚úÖ –í–æ—Ç –≤–∞—à —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–∏—ë–º–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã!"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    admin_message = (
        "üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —á–µ–∫-–ª–∏—Å—Ç:*\n"
        f"üë§ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üìç *–†–∞–π–æ–Ω:* {context.user_data['area']}\n"
        f"üéØ *–¶–µ–ª—å:* {context.user_data['goal']}\n"
        f"üè¶ *–ò–ø–æ—Ç–µ–∫–∞:* {context.user_data['mortgage']}"
    )
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=admin_message,
        parse_mode="Markdown"
    )
    
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_area)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            MORTGAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mortgage)],
            PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /cancel
                MessageHandler(filters.TEXT & ~filters.COMMAND, 
                              lambda u, c: get_phone(u, c) if u.message.contact else None)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    app.add_handler(conv_handler)
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()