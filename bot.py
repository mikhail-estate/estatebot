import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
NAME, AREA, GOAL, MORTGAGE, PHONE = range(5)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–∏—ë–º–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–¢–æ–ª—å–∫–æ –∏–º—è)"
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–π–æ–Ω."""
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üèô –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ –ñ–ö –∫–≤–∞—Ä—Ç–∏—Ä–∞?")
    return AREA

async def get_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–π–æ–Ω –∏ —É—Ç–æ—á–Ω—è–µ–º —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏."""
    context.user_data['area'] = update.message.text
    reply_keyboard = [["–î–ª—è —Å–µ–±—è", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"]]
    await update.message.reply_text(
        "üè† –ü–æ–∫—É–ø–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return GOAL

async def get_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∏–ø–æ—Ç–µ–∫—É."""
    context.user_data['goal'] = update.message.text
    await update.message.reply_text("üíµ –ë—É–¥–µ—Ç–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∏–ø–æ—Ç–µ–∫—É? (–î–∞/–ù–µ—Ç)")
    return MORTGAGE

async def get_mortgage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–ø–æ—Ç–µ–∫–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –ß–ï–†–ï–ó –ö–ù–û–ü–ö–£."""
    context.user_data['mortgage'] = update.message.text
    
    # –ñ—ë—Å—Ç–∫–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞)
    phone_btn = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup = ReplyKeyboardMarkup([[phone_btn]], resize_keyboard=True)
    
    await update.message.reply_text(
        "üì± –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä.\n\n"
        "‚ùó **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ** ‚Äî —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è!",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É, –∏–Ω–∞—á–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º."""
    if update.message.contact:
        # –£—Å–ø–µ—Ö: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä
        context.user_data['phone'] = update.message.contact.phone_number
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫-–ª–∏—Å—Ç
        try:
            with open("checklist.pdf", "rb") as file:
                await update.message.reply_document(
                    document=file,
                    caption="‚úÖ –í–æ—Ç –≤–∞—à —á–µ–∫-–ª–∏—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏—ë–º–∫–æ–π."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ PDF: {e}")
            await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            "üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n"
            f"üë§ –ò–º—è: {context.user_data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{context.user_data['phone']}`\n"
            f"üìç –†–∞–π–æ–Ω: {context.user_data['area']}\n"
            f"üéØ –¶–µ–ª—å: {context.user_data['goal']}\n"
            f"üè¶ –ò–ø–æ—Ç–µ–∫–∞: {context.user_data['mortgage']}"
        )
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_msg,
            parse_mode="Markdown"
        )
        
        return ConversationHandler.END
    
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –≤—Ä—É—á–Ω—É—é ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        await update.message.reply_text(
            "‚ùå *–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        return PHONE  # –û—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("üö´ –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_area)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_goal)],
            MORTGAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mortgage)],
            PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)  # –õ–æ–≤–∏–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    app.add_handler(conv_handler)
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()